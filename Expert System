// CLASS DEFINITIONS
(defclass DEST
    (is-a-USER)
    (role concrete)
    (slot temp)
    (slot geography)
    (slot activity)
)

(defclass PricePoint
    (is-a-USER)
    (role concrete)
    (slot price_type)
)

// OBJECT DEFINITIONS
(definstances DEST-INSTANCES
    (firstdest of DEST (geography land) (temp warm) (activity hiking))
    (seconddest of DEST (geography land) (temp warm) (activity museum))
    (thirddest of DEST (geography land) (temp cold) (activity snowboarding))
    (fourthdest of DEST (geography water) (temp cold) (activity white-water-rafting))
    (fifthdest of DEST (geography water) (temp warm) (activity lap-swimming))
    (sixthdest of DEST (geography water) (temp warm) (activity waterpark))
)

(definstances PricePoint-Instances
  (firstPrice of PricePoint (free no) (cheap no) (expensive no))
  (secondPrice of PricePoint (free yes) (cheap no) (expensive no))
  (thirdPrice of PricePoint (free no) (cheap yes) (expensive no))
  (fourthPrice of PricePoint (free no) (cheap no) (expensive yes))
)

// FUNCTION FOR QUESTIONS
(deffunction ask-question (?question $?allowed-values)
   (printout t ?question)
   (bind ?answer (read))
   (if (lexemep ?answer) 
       then (bind ?answer (lowcase ?answer)))
   (while (not (member ?answer ?allowed-values)) do
      (printout t ?question)
      (bind ?answer (read))
      (if (lexemep ?answer) 
          then (bind ?answer (lowcase ?answer))))
   ?answer)

(deffunction yes-or-no-p (?question)
   (bind ?response (ask-question ?question yes no y n))
   (if (or (eq ?response yes) (eq ?response y))
       then yes 
       else no))

// QUERY RULES
(defrule price (declare (salience 10000))
    ?ins <- (object (is-a PricePoint) )
=> 
    (send ?ins put-price-type (ask-question "Do you want the activity to be free, cheap, or expensive"  free cheap expensive )) )

(defrule location (declare (salience 10000))
    ?ins <- (object (is-a DEST) )
=> 
    (send ?ins put-geography (ask-question "Do you want the activity to be land-based or water-based?"  land water )) )

(defrule temperature (declare (salience 10000))
    ?ins <- (object (is-a DEST) )
=> 
    (send ?ins put-temp (ask-question "Do you want the activity to be warm or cold?"  warn cold )) )

// RULES
